
class Node:
    def __init__(self,data=None,next=None):
        self.data=data
        self.next=next
    
class LinkedList:
    def __init__(self):
        self.head=None
        return
    def insert_at_start(self,data):
        node=Node(data,self.head)
        self.head=node
    
    def print(self):
        if self.head is None:
            print('error')
        
        else:
            i=self.head
            st=''
            while i:
                st+=(i.data)+'-->'
                i=i.next
                print(st)

    def insert_value(self,data_list):
        self.head=None
        for data in data_list:
            self.insert_at_start(data)

    def insert_at_end(self,data):
        if self.head is None:
            new_node=Node(data,None)
            self.head=new_node
        else:
            i=self.head
            while i.next:
                i=i.next
            i.next=Node(data,None)
            return
    def remove_by_value(self,data,):
        i=self.head
        while i:
            if data==i.data:
                i.next=i.next.next
                break
        i=i.next
    def insert_after_value(self,pre_data,data):
        i=self.head
        while i:
            if i.data==pre_data:
                i.next=Node(data)
                return
            i=i.next
        



if __name__=='__main__':
    ll = LinkedList()
    ll.insert_value(["banana","mango","grapes","orange"])
    ll.print()
    ll.insert_after_value("mango","apple") # insert apple after mango
    ll.print()
    ll.remove_by_value("orange") # remove orange from linked list
    ll.print()
    ll.remove_by_value("figs")
    ll.print()
    ll.remove_by_value("banana")
    ll.remove_by_value("mango")
    ll.remove_by_value("apple")
    ll.remove_by_value("grapes")
    ll.print() 
